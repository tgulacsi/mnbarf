package main

// Generated by https://github.com/cloudescape/gowsdl
// Do not modify
// Copyright (c) 2014, Cloudescape. All rights reserved.
import (
	gowsdl "github.com/cloudescape/gowsdl/generator"
	"time"
)

// against "unused imports"
var _ time.Time

type Season string

const (
	Season_Spring Season = "Spring"
	Season_Summer Season = "Summer"
	Season_Fall   Season = "Fall"
	Season_Winter Season = "Winter"
)

type AdjustmentType string

const (
	AdjustmentType_Addition     AdjustmentType = "Addition"
	AdjustmentType_Cancellation AdjustmentType = "Cancellation"
)

type Direction string

const (
	Direction_Westbound Direction = "Westbound"
	Direction_Eastbound Direction = "Eastbound"
)

type TimeType string

const (
	TimeType_Departure TimeType = "Departure"
	TimeType_Arrival   TimeType = "Arrival"
)

type LoadIndicator string

const (
	LoadIndicator_Passenger LoadIndicator = "Passenger"
	LoadIndicator_Vehicle   LoadIndicator = "Vehicle"
	LoadIndicator_Both      LoadIndicator = "Both"
)

type GetActiveScheduledSeasons struct {
}

type GetActiveScheduledSeasonsResponse struct {
	GetActiveScheduledSeasonsResult *ArrayOfSchedBriefResponse `xml:"GetActiveScheduledSeasonsResult,omitempty"`
}

type GetAllAlerts struct {
}

type GetAllAlertsResponse struct {
	GetAllAlertsResult *ArrayOfAlertResponse `xml:"GetAllAlertsResult,omitempty"`
}

type GetAllRouteDetails struct {
	Request *TripDateMsg `xml:"request,omitempty"`
}

type GetAllRouteDetailsResponse struct {
	GetAllRouteDetailsResult *ArrayOfRouteResponse `xml:"GetAllRouteDetailsResult,omitempty"`
}

type GetAllRoutes struct {
	Request *TripDateMsg `xml:"request,omitempty"`
}

type GetAllRoutesResponse struct {
	GetAllRoutesResult *ArrayOfRouteBriefResponse `xml:"GetAllRoutesResult,omitempty"`
}

type GetAllRoutesHavingServiceDisruptions struct {
	Request *TripDateMsg `xml:"request,omitempty"`
}

type GetAllRoutesHavingServiceDisruptionsResponse struct {
	GetAllRoutesHavingServiceDisruptionsResult *ArrayOfRouteBriefResponse `xml:"GetAllRoutesHavingServiceDisruptionsResult,omitempty"`
}

type GetAllSchedRoutes struct {
}

type GetAllSchedRoutesResponse struct {
	GetAllSchedRoutesResult *ArrayOfSchedRouteBriefResponse `xml:"GetAllSchedRoutesResult,omitempty"`
}

type GetAllTerminals struct {
	Request *TripDateMsg `xml:"request,omitempty"`
}

type GetAllTerminalsResponse struct {
	GetAllTerminalsResult *ArrayOfTerminalResponse `xml:"GetAllTerminalsResult,omitempty"`
}

type GetAllTerminalsAndMates struct {
	Request *TripDateMsg `xml:"request,omitempty"`
}

type GetAllTerminalsAndMatesResponse struct {
	GetAllTerminalsAndMatesResult *ArrayOfTerminalComboResponse `xml:"GetAllTerminalsAndMatesResult,omitempty"`
}

type GetAllTimeAdj struct {
}

type GetAllTimeAdjResponse struct {
	GetAllTimeAdjResult *ArrayOfSchedTimeAdjResponse `xml:"GetAllTimeAdjResult,omitempty"`
}

type GetCacheFlushDate struct {
}

type GetCacheFlushDateResponse struct {
	GetCacheFlushDateResult time.Time `xml:"GetCacheFlushDateResult,omitempty"`
}

type GetRouteDetail struct {
	Request *RouteMsg `xml:"request,omitempty"`
}

type GetRouteDetailResponse struct {
	GetRouteDetailResult *RouteResponse `xml:"GetRouteDetailResult,omitempty"`
}

type GetRouteDetailsByTerminalCombo struct {
	Request *TerminalComboMsg `xml:"request,omitempty"`
}

type GetRouteDetailsByTerminalComboResponse struct {
	GetRouteDetailsByTerminalComboResult *ArrayOfRouteResponse `xml:"GetRouteDetailsByTerminalComboResult,omitempty"`
}

type GetRoutesByTerminalCombo struct {
	Request *TerminalComboMsg `xml:"request,omitempty"`
}

type GetRoutesByTerminalComboResponse struct {
	GetRoutesByTerminalComboResult *ArrayOfRouteBriefResponse `xml:"GetRoutesByTerminalComboResult,omitempty"`
}

type GetSchedRoutesByScheduledSeason struct {
	Request *SchedMsg `xml:"request,omitempty"`
}

type GetSchedRoutesByScheduledSeasonResponse struct {
	GetSchedRoutesByScheduledSeasonResult *ArrayOfSchedRouteBriefResponse `xml:"GetSchedRoutesByScheduledSeasonResult,omitempty"`
}

type GetSchedSailingsBySchedRoute struct {
	Request *SchedRouteMsg `xml:"request,omitempty"`
}

type GetSchedSailingsBySchedRouteResponse struct {
	GetSchedSailingsBySchedRouteResult *ArrayOfSchedSailingResponse `xml:"GetSchedSailingsBySchedRouteResult,omitempty"`
}

type GetScheduleByRoute struct {
	Request *RouteMsg `xml:"request,omitempty"`
}

type GetScheduleByRouteResponse struct {
	GetScheduleByRouteResult *SchedResponse `xml:"GetScheduleByRouteResult,omitempty"`
}

type GetScheduleByTerminalCombo struct {
	Request *TerminalComboMsg `xml:"request,omitempty"`
}

type GetScheduleByTerminalComboResponse struct {
	GetScheduleByTerminalComboResult *SchedResponse `xml:"GetScheduleByTerminalComboResult,omitempty"`
}

type GetTerminalMates struct {
	Request *TerminalMsg `xml:"request,omitempty"`
}

type GetTerminalMatesResponse struct {
	GetTerminalMatesResult *ArrayOfTerminalResponse `xml:"GetTerminalMatesResult,omitempty"`
}

type GetTimeAdjByRoute struct {
	Request *RouteBriefMsg `xml:"request,omitempty"`
}

type GetTimeAdjByRouteResponse struct {
	GetTimeAdjByRouteResult *ArrayOfSchedTimeAdjResponse `xml:"GetTimeAdjByRouteResult,omitempty"`
}

type GetTimeAdjBySchedRoute struct {
	Request *SchedRouteMsg `xml:"request,omitempty"`
}

type GetTimeAdjBySchedRouteResponse struct {
	GetTimeAdjBySchedRouteResult *ArrayOfSchedTimeAdjResponse `xml:"GetTimeAdjBySchedRouteResult,omitempty"`
}

type GetTodaysScheduleByRoute struct {
	Request *RouteTodayMsg `xml:"request,omitempty"`
}

type GetTodaysScheduleByRouteResponse struct {
	GetTodaysScheduleByRouteResult *SchedResponse `xml:"GetTodaysScheduleByRouteResult,omitempty"`
}

type GetTodaysScheduleByTerminalCombo struct {
	Request *TerminalComboTodayMsg `xml:"request,omitempty"`
}

type GetTodaysScheduleByTerminalComboResponse struct {
	GetTodaysScheduleByTerminalComboResult *SchedResponse `xml:"GetTodaysScheduleByTerminalComboResult,omitempty"`
}

type GetValidDateRange struct {
}

type GetValidDateRangeResponse struct {
	GetValidDateRangeResult *ValidDateRangeResponse `xml:"GetValidDateRangeResult,omitempty"`
}

type ArrayOfSchedBriefResponse struct {
	SchedBriefResponse []*SchedBriefResponse `xml:"SchedBriefResponse,omitempty"`
}

type SchedBriefResponse struct {
	ScheduleID     int32     `xml:"ScheduleID,omitempty"`
	ScheduleName   string    `xml:"ScheduleName,omitempty"`
	ScheduleSeason *Season   `xml:"ScheduleSeason,omitempty"`
	SchedulePDFUrl string    `xml:"SchedulePDFUrl,omitempty"`
	ScheduleStart  time.Time `xml:"ScheduleStart,omitempty"`
	ScheduleEnd    time.Time `xml:"ScheduleEnd,omitempty"`
}

type APIAccessHeader struct {
	APIAccessCode string `xml:"APIAccessCode,omitempty"`
}

type ArrayOfAlertResponse struct {
	AlertResponse []*AlertResponse `xml:"AlertResponse,omitempty"`
}

type AlertResponse struct {
	BulletinID            int32       `xml:"BulletinID,omitempty"`
	BulletinFlag          bool        `xml:"BulletinFlag,omitempty"`
	BulletinText          string      `xml:"BulletinText,omitempty"`
	CommunicationFlag     bool        `xml:"CommunicationFlag,omitempty"`
	CommunicationText     string      `xml:"CommunicationText,omitempty"`
	RouteAlertFlag        bool        `xml:"RouteAlertFlag,omitempty"`
	RouteAlertText        string      `xml:"RouteAlertText,omitempty"`
	HomepageAlertText     string      `xml:"HomepageAlertText,omitempty"`
	PublishDate           time.Time   `xml:"PublishDate,omitempty"`
	DisruptionDescription string      `xml:"DisruptionDescription,omitempty"`
	AllRoutesFlag         bool        `xml:"AllRoutesFlag,omitempty"`
	SortSeq               int32       `xml:"SortSeq,omitempty"`
	AlertTypeID           int32       `xml:"AlertTypeID,omitempty"`
	AlertType             string      `xml:"AlertType,omitempty"`
	AlertFullTitle        string      `xml:"AlertFullTitle,omitempty"`
	AffectedRouteIDs      *ArrayOfInt `xml:"AffectedRouteIDs,omitempty"`
}

type ArrayOfInt struct {
	Int []int32 `xml:"int,omitempty"`
}

type TripDateMsg struct {
	TripDate time.Time `xml:"TripDate,omitempty"`
}

type ArrayOfRouteResponse struct {
	RouteResponse []*RouteResponse `xml:"RouteResponse,omitempty"`
}

type RouteResponse struct {
	RouteID            int32              `xml:"RouteID,omitempty"`
	RouteAbbrev        string             `xml:"RouteAbbrev,omitempty"`
	Description        string             `xml:"Description,omitempty"`
	RegionID           int32              `xml:"RegionID,omitempty"`
	VesselWatchID      int32              `xml:"VesselWatchID,omitempty"`
	ReservationFlag    bool               `xml:"ReservationFlag,omitempty"`
	InternationalFlag  bool               `xml:"InternationalFlag,omitempty"`
	PassengerOnlyFlag  bool               `xml:"PassengerOnlyFlag,omitempty"`
	CrossingTime       string             `xml:"CrossingTime,omitempty"`
	AdaNotes           string             `xml:"AdaNotes,omitempty"`
	GeneralRouteNotes  string             `xml:"GeneralRouteNotes,omitempty"`
	SeasonalRouteNotes string             `xml:"SeasonalRouteNotes,omitempty"`
	Alerts             *ArrayOfRouteAlert `xml:"Alerts,omitempty"`
}

type ArrayOfRouteAlert struct {
	RouteAlert []*RouteAlert `xml:"RouteAlert,omitempty"`
}

type RouteAlert struct {
	BulletinID            int32     `xml:"BulletinID,omitempty"`
	BulletinFlag          bool      `xml:"BulletinFlag,omitempty"`
	CommunicationFlag     bool      `xml:"CommunicationFlag,omitempty"`
	PublishDate           time.Time `xml:"PublishDate,omitempty"`
	AlertDescription      string    `xml:"AlertDescription,omitempty"`
	DisruptionDescription string    `xml:"DisruptionDescription,omitempty"`
	AlertFullTitle        string    `xml:"AlertFullTitle,omitempty"`
	AlertFullText         string    `xml:"AlertFullText,omitempty"`
}

type ArrayOfRouteBriefResponse struct {
	RouteBriefResponse []*RouteBriefResponse `xml:"RouteBriefResponse,omitempty"`
}

type RouteBriefResponse struct {
	RouteID            int32                   `xml:"RouteID,omitempty"`
	RouteAbbrev        string                  `xml:"RouteAbbrev,omitempty"`
	Description        string                  `xml:"Description,omitempty"`
	RegionID           int32                   `xml:"RegionID,omitempty"`
	ServiceDisruptions *ArrayOfRouteBriefAlert `xml:"ServiceDisruptions,omitempty"`
}

type ArrayOfRouteBriefAlert struct {
	RouteBriefAlert []*RouteBriefAlert `xml:"RouteBriefAlert,omitempty"`
}

type RouteBriefAlert struct {
	BulletinID            int32     `xml:"BulletinID,omitempty"`
	BulletinFlag          bool      `xml:"BulletinFlag,omitempty"`
	PublishDate           time.Time `xml:"PublishDate,omitempty"`
	DisruptionDescription string    `xml:"DisruptionDescription,omitempty"`
}

type ArrayOfSchedRouteBriefResponse struct {
	SchedRouteBriefResponse []*SchedRouteBriefResponse `xml:"SchedRouteBriefResponse,omitempty"`
}

type SchedRouteBriefResponse struct {
	ScheduleID         int32                   `xml:"ScheduleID,omitempty"`
	SchedRouteID       int32                   `xml:"SchedRouteID,omitempty"`
	ContingencyOnly    bool                    `xml:"ContingencyOnly,omitempty"`
	RouteID            int32                   `xml:"RouteID,omitempty"`
	RouteAbbrev        string                  `xml:"RouteAbbrev,omitempty"`
	Description        string                  `xml:"Description,omitempty"`
	SeasonalRouteNotes string                  `xml:"SeasonalRouteNotes,omitempty"`
	RegionID           int32                   `xml:"RegionID,omitempty"`
	ServiceDisruptions *ArrayOfRouteBriefAlert `xml:"ServiceDisruptions,omitempty"`
	ContingencyAdj     *ArrayOfSchedRouteAdj   `xml:"ContingencyAdj,omitempty"`
}

type ArrayOfSchedRouteAdj struct {
	SchedRouteAdj []*SchedRouteAdj `xml:"SchedRouteAdj,omitempty"`
}

type SchedRouteAdj struct {
	DateFrom               time.Time       `xml:"DateFrom,omitempty"`
	DateThru               time.Time       `xml:"DateThru,omitempty"`
	EventID                int32           `xml:"EventID,omitempty"`
	EventDescription       string          `xml:"EventDescription,omitempty"`
	AdjType                *AdjustmentType `xml:"AdjType,omitempty"`
	ReplacedBySchedRouteID int32           `xml:"ReplacedBySchedRouteID,omitempty"`
}

type ArrayOfTerminalResponse struct {
	TerminalResponse []*TerminalResponse `xml:"TerminalResponse,omitempty"`
}

type TerminalResponse struct {
	TerminalID  int32  `xml:"TerminalID,omitempty"`
	Description string `xml:"Description,omitempty"`
}

type ArrayOfTerminalComboResponse struct {
	TerminalComboResponse []*TerminalComboResponse `xml:"TerminalComboResponse,omitempty"`
}

type TerminalComboResponse struct {
	DepartingTerminalID  int32  `xml:"DepartingTerminalID,omitempty"`
	DepartingDescription string `xml:"DepartingDescription,omitempty"`
	ArrivingTerminalID   int32  `xml:"ArrivingTerminalID,omitempty"`
	ArrivingDescription  string `xml:"ArrivingDescription,omitempty"`
}

type ArrayOfSchedTimeAdjResponse struct {
	SchedTimeAdjResponse []*SchedTimeAdjResponse `xml:"SchedTimeAdjResponse,omitempty"`
}

type SchedTimeAdjResponse struct {
	ScheduleID               int32                   `xml:"ScheduleID,omitempty"`
	SchedRouteID             int32                   `xml:"SchedRouteID,omitempty"`
	RouteID                  int32                   `xml:"RouteID,omitempty"`
	RouteDescription         string                  `xml:"RouteDescription,omitempty"`
	RouteSortSeq             int32                   `xml:"RouteSortSeq,omitempty"`
	SailingID                int32                   `xml:"SailingID,omitempty"`
	SailingDescription       string                  `xml:"SailingDescription,omitempty"`
	ActiveSailingDateRange   *SchedSailingDateRange  `xml:"ActiveSailingDateRange,omitempty"`
	SailingDir               *Direction              `xml:"SailingDir,omitempty"`
	JourneyID                int32                   `xml:"JourneyID,omitempty"`
	VesselID                 int32                   `xml:"VesselID,omitempty"`
	VesselName               string                  `xml:"VesselName,omitempty"`
	VesselHandicapAccessible bool                    `xml:"VesselHandicapAccessible,omitempty"`
	VesselPositionNum        int32                   `xml:"VesselPositionNum,omitempty"`
	JourneyTerminalID        int32                   `xml:"JourneyTerminalID,omitempty"`
	TerminalID               int32                   `xml:"TerminalID,omitempty"`
	TerminalDescription      string                  `xml:"TerminalDescription,omitempty"`
	TerminalBriefDescription string                  `xml:"TerminalBriefDescription,omitempty"`
	TimeToAdj                time.Time               `xml:"TimeToAdj,omitempty"`
	AdjDateFrom              time.Time               `xml:"AdjDateFrom,omitempty"`
	AdjDateThru              time.Time               `xml:"AdjDateThru,omitempty"`
	TidalAdj                 bool                    `xml:"TidalAdj,omitempty"`
	EventID                  int32                   `xml:"EventID,omitempty"`
	EventDescription         string                  `xml:"EventDescription,omitempty"`
	DepArrIndicator          *TimeType               `xml:"DepArrIndicator,omitempty"`
	AdjType                  *AdjustmentType         `xml:"AdjType,omitempty"`
	Annotations              *ArrayOfSchedAnnotation `xml:"Annotations,omitempty"`
}

type SchedSailingDateRange struct {
	DateFrom         time.Time `xml:"DateFrom,omitempty"`
	DateThru         time.Time `xml:"DateThru,omitempty"`
	EventID          int32     `xml:"EventID,omitempty"`
	EventDescription string    `xml:"EventDescription,omitempty"`
}

type ArrayOfSchedAnnotation struct {
	SchedAnnotation []*SchedAnnotation `xml:"SchedAnnotation,omitempty"`
}

type SchedAnnotation struct {
	AnnotationID         int32  `xml:"AnnotationID,omitempty"`
	AnnotationText       string `xml:"AnnotationText,omitempty"`
	AnnotationIVRText    string `xml:"AnnotationIVRText,omitempty"`
	AdjustedCrossingTime int32  `xml:"AdjustedCrossingTime,omitempty"`
	AnnotationImg        string `xml:"AnnotationImg,omitempty"`
	TypeDescription      string `xml:"TypeDescription,omitempty"`
	SortSeq              int32  `xml:"SortSeq,omitempty"`
}

type RouteMsg struct {
	TripDate time.Time `xml:"TripDate,omitempty"`
	RouteID  int32     `xml:"RouteID,omitempty"`
}

type TerminalComboMsg struct {
	TripDate            time.Time `xml:"TripDate,omitempty"`
	DepartingTerminalID int32     `xml:"DepartingTerminalID,omitempty"`
	ArrivingTerminalID  int32     `xml:"ArrivingTerminalID,omitempty"`
}

type SchedMsg struct {
	ScheduleID int32 `xml:"ScheduleID,omitempty"`
}

type SchedRouteMsg struct {
	SchedRouteID int32 `xml:"SchedRouteID,omitempty"`
}

type ArrayOfSchedSailingResponse struct {
	SchedSailingResponse []*SchedSailingResponse `xml:"SchedSailingResponse,omitempty"`
}

type SchedSailingResponse struct {
	ScheduleID         int32                         `xml:"ScheduleID,omitempty"`
	SchedRouteID       int32                         `xml:"SchedRouteID,omitempty"`
	RouteID            int32                         `xml:"RouteID,omitempty"`
	SailingID          int32                         `xml:"SailingID,omitempty"`
	SailingDescription string                        `xml:"SailingDescription,omitempty"`
	SailingNotes       string                        `xml:"SailingNotes,omitempty"`
	DisplayColNum      int32                         `xml:"DisplayColNum,omitempty"`
	SailingDir         *Direction                    `xml:"SailingDir,omitempty"`
	DayOpDescription   string                        `xml:"DayOpDescription,omitempty"`
	DayOpUseForHoliday bool                          `xml:"DayOpUseForHoliday,omitempty"`
	ActiveDateRanges   *ArrayOfSchedSailingDateRange `xml:"ActiveDateRanges,omitempty"`
	Journs             *ArrayOfSchedJourn            `xml:"Journs,omitempty"`
}

type ArrayOfSchedSailingDateRange struct {
	SchedSailingDateRange []*SchedSailingDateRange `xml:"SchedSailingDateRange,omitempty"`
}

type ArrayOfSchedJourn struct {
	SchedJourn []*SchedJourn `xml:"SchedJourn,omitempty"`
}

type SchedJourn struct {
	JourneyID                int32                     `xml:"JourneyID,omitempty"`
	ReservationInd           bool                      `xml:"ReservationInd,omitempty"`
	InternationalInd         bool                      `xml:"InternationalInd,omitempty"`
	InterislandInd           bool                      `xml:"InterislandInd,omitempty"`
	VesselID                 int32                     `xml:"VesselID,omitempty"`
	VesselName               string                    `xml:"VesselName,omitempty"`
	VesselHandicapAccessible bool                      `xml:"VesselHandicapAccessible,omitempty"`
	VesselPositionNum        int32                     `xml:"VesselPositionNum,omitempty"`
	TerminalTimes            *ArrayOfSchedTimeTerminal `xml:"TerminalTimes,omitempty"`
}

type ArrayOfSchedTimeTerminal struct {
	SchedTimeTerminal []*SchedTimeTerminal `xml:"SchedTimeTerminal,omitempty"`
}

type SchedTimeTerminal struct {
	JourneyTerminalID        int32                   `xml:"JourneyTerminalID,omitempty"`
	TerminalID               int32                   `xml:"TerminalID,omitempty"`
	TerminalDescription      string                  `xml:"TerminalDescription,omitempty"`
	TerminalBriefDescription string                  `xml:"TerminalBriefDescription,omitempty"`
	Time                     time.Time               `xml:"Time,omitempty"`
	DepArrIndicator          *TimeType               `xml:"DepArrIndicator,omitempty"`
	IsNA                     bool                    `xml:"IsNA,omitempty"`
	Annotations              *ArrayOfSchedAnnotation `xml:"Annotations,omitempty"`
}

type SchedResponse struct {
	ScheduleID     int32                      `xml:"ScheduleID,omitempty"`
	ScheduleName   string                     `xml:"ScheduleName,omitempty"`
	ScheduleSeason *Season                    `xml:"ScheduleSeason,omitempty"`
	SchedulePDFUrl string                     `xml:"SchedulePDFUrl,omitempty"`
	ScheduleStart  time.Time                  `xml:"ScheduleStart,omitempty"`
	ScheduleEnd    time.Time                  `xml:"ScheduleEnd,omitempty"`
	AllRoutes      *ArrayOfInt                `xml:"AllRoutes,omitempty"`
	TerminalCombos *ArrayOfSchedTerminalCombo `xml:"TerminalCombos,omitempty"`
}

type ArrayOfSchedTerminalCombo struct {
	SchedTerminalCombo []*SchedTerminalCombo `xml:"SchedTerminalCombo,omitempty"`
}

type SchedTerminalCombo struct {
	DepartingTerminalID   int32             `xml:"DepartingTerminalID,omitempty"`
	DepartingTerminalName string            `xml:"DepartingTerminalName,omitempty"`
	ArrivingTerminalID    int32             `xml:"ArrivingTerminalID,omitempty"`
	ArrivingTerminalName  string            `xml:"ArrivingTerminalName,omitempty"`
	SailingNotes          string            `xml:"SailingNotes,omitempty"`
	Annotations           *ArrayOfString    `xml:"Annotations,omitempty"`
	Times                 *ArrayOfSchedTime `xml:"Times,omitempty"`
}

type ArrayOfString struct {
	String []string `xml:"string,omitempty"`
}

type ArrayOfSchedTime struct {
	SchedTime []*SchedTime `xml:"SchedTime,omitempty"`
}

type SchedTime struct {
	DepartingTime            time.Time      `xml:"DepartingTime,omitempty"`
	ArrivingTime             time.Time      `xml:"ArrivingTime,omitempty"`
	LoadingRule              *LoadIndicator `xml:"LoadingRule,omitempty"`
	VesselID                 int32          `xml:"VesselID,omitempty"`
	VesselName               string         `xml:"VesselName,omitempty"`
	VesselHandicapAccessible bool           `xml:"VesselHandicapAccessible,omitempty"`
	VesselPositionNum        int32          `xml:"VesselPositionNum,omitempty"`
	Routes                   *ArrayOfInt    `xml:"Routes,omitempty"`
	AnnotationIndexes        *ArrayOfInt    `xml:"AnnotationIndexes,omitempty"`
}

type TerminalMsg struct {
	TripDate   time.Time `xml:"TripDate,omitempty"`
	TerminalID int32     `xml:"TerminalID,omitempty"`
}

type RouteBriefMsg struct {
	RouteID int32 `xml:"RouteID,omitempty"`
}

type RouteTodayMsg struct {
	RouteID            int32 `xml:"RouteID,omitempty"`
	OnlyRemainingTimes bool  `xml:"OnlyRemainingTimes,omitempty"`
}

type TerminalComboTodayMsg struct {
	DepartingTerminalID int32 `xml:"DepartingTerminalID,omitempty"`
	ArrivingTerminalID  int32 `xml:"ArrivingTerminalID,omitempty"`
	OnlyRemainingTimes  bool  `xml:"OnlyRemainingTimes,omitempty"`
}

type ValidDateRangeResponse struct {
	DateFrom time.Time `xml:"DateFrom,omitempty"`
	DateThru time.Time `xml:"DateThru,omitempty"`
}

type WSF_x0020_ScheduleSoap struct {
	client *gowsdl.SoapClient
}

func NewWSF_x0020_ScheduleSoap(url string, tls bool) *WSF_x0020_ScheduleSoap {
	if url == "" {
		url = "http://b2b.wsdot.wa.gov/ferries/schedule/Default.asmx"
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &WSF_x0020_ScheduleSoap{
		client: client,
	}
}

// Provides a brief summary of all scheduled sailing seasons that are currently active / available.
func (service *WSF_x0020_ScheduleSoap) GetActiveScheduledSeasons(request *GetActiveScheduledSeasons) (*GetActiveScheduledSeasonsResponse, error) {
	response := &GetActiveScheduledSeasonsResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetActiveScheduledSeasons", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Retrieves all published alerts.
func (service *WSF_x0020_ScheduleSoap) GetAllAlerts(request *GetAllAlerts) (*GetAllAlertsResponse, error) {
	response := &GetAllAlertsResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetAllAlerts", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Provides detailed information for all available routes pertaining to a particular date.
func (service *WSF_x0020_ScheduleSoap) GetAllRouteDetails(request *GetAllRouteDetails) (*GetAllRouteDetailsResponse, error) {
	response := &GetAllRouteDetailsResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetAllRouteDetails", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Provides all available routes for a particular date.
func (service *WSF_x0020_ScheduleSoap) GetAllRoutes(request *GetAllRoutes) (*GetAllRoutesResponse, error) {
	response := &GetAllRoutesResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetAllRoutes", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Provides all available routes for a particular date where one or more service disruptions are present.
func (service *WSF_x0020_ScheduleSoap) GetAllRoutesHavingServiceDisruptions(request *GetAllRoutesHavingServiceDisruptions) (*GetAllRoutesHavingServiceDisruptionsResponse, error) {
	response := &GetAllRoutesHavingServiceDisruptionsResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetAllRoutesHavingServiceDisruptions", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Retrieves the scheduled route(s) for all seasons that are currently active / available.
func (service *WSF_x0020_ScheduleSoap) GetAllSchedRoutes(request *GetAllSchedRoutes) (*GetAllSchedRoutesResponse, error) {
	response := &GetAllSchedRoutesResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetAllSchedRoutes", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Provides all available terminals for a particular date.
func (service *WSF_x0020_ScheduleSoap) GetAllTerminals(request *GetAllTerminals) (*GetAllTerminalsResponse, error) {
	response := &GetAllTerminalsResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetAllTerminals", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// For a given date, retrieves all available terminal combinations.
func (service *WSF_x0020_ScheduleSoap) GetAllTerminalsAndMates(request *GetAllTerminalsAndMates) (*GetAllTerminalsAndMatesResponse, error) {
	response := &GetAllTerminalsAndMatesResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetAllTerminalsAndMates", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Provides a list of all individual time adjustments (additions or cancellations) that are currently active / available.
func (service *WSF_x0020_ScheduleSoap) GetAllTimeAdj(request *GetAllTimeAdj) (*GetAllTimeAdjResponse, error) {
	response := &GetAllTimeAdjResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetAllTimeAdj", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Most web methods in this service are cached.  If you are also using caching in your user interface, it may be helpful to know the date and time that the cache was last flushed in this web service.
func (service *WSF_x0020_ScheduleSoap) GetCacheFlushDate(request *GetCacheFlushDate) (*GetCacheFlushDateResponse, error) {
	response := &GetCacheFlushDateResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetCacheFlushDate", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Retrieves detailed information pertaining to a scheduled route.
func (service *WSF_x0020_ScheduleSoap) GetRouteDetail(request *GetRouteDetail) (*GetRouteDetailResponse, error) {
	response := &GetRouteDetailResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetRouteDetail", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Retrieves detailed information for scheduled routes that are associated with a particular terminal combination.
func (service *WSF_x0020_ScheduleSoap) GetRouteDetailsByTerminalCombo(request *GetRouteDetailsByTerminalCombo) (*GetRouteDetailsByTerminalComboResponse, error) {
	response := &GetRouteDetailsByTerminalComboResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetRouteDetailsByTerminalCombo", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Retrieves route(s) for a particular date and terminal combination.
func (service *WSF_x0020_ScheduleSoap) GetRoutesByTerminalCombo(request *GetRoutesByTerminalCombo) (*GetRoutesByTerminalComboResponse, error) {
	response := &GetRoutesByTerminalComboResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetRoutesByTerminalCombo", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Retrieves scheduled route(s) for a particular active season.
func (service *WSF_x0020_ScheduleSoap) GetSchedRoutesByScheduledSeason(request *GetSchedRoutesByScheduledSeason) (*GetSchedRoutesByScheduledSeasonResponse, error) {
	response := &GetSchedRoutesByScheduledSeasonResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetSchedRoutesByScheduledSeason", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Retrieves sailings and departure/arrival times that correspond with a particular scheduled route.
func (service *WSF_x0020_ScheduleSoap) GetSchedSailingsBySchedRoute(request *GetSchedSailingsBySchedRoute) (*GetSchedSailingsBySchedRouteResponse, error) {
	response := &GetSchedSailingsBySchedRouteResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetSchedSailingsBySchedRoute", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Retrieves sailing times associated with a specific route for a particular date.
func (service *WSF_x0020_ScheduleSoap) GetScheduleByRoute(request *GetScheduleByRoute) (*GetScheduleByRouteResponse, error) {
	response := &GetScheduleByRouteResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetScheduleByRoute", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Retrieves sailing times associated with a specific departing / arriving terminal combination for a particular date.
func (service *WSF_x0020_ScheduleSoap) GetScheduleByTerminalCombo(request *GetScheduleByTerminalCombo) (*GetScheduleByTerminalComboResponse, error) {
	response := &GetScheduleByTerminalComboResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetScheduleByTerminalCombo", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Provides all available terminals that correspond to a given terminal for a particular date.
func (service *WSF_x0020_ScheduleSoap) GetTerminalMates(request *GetTerminalMates) (*GetTerminalMatesResponse, error) {
	response := &GetTerminalMatesResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetTerminalMates", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Provides a list of individual time adjustments (additions or cancellations) for a particular route.
func (service *WSF_x0020_ScheduleSoap) GetTimeAdjByRoute(request *GetTimeAdjByRoute) (*GetTimeAdjByRouteResponse, error) {
	response := &GetTimeAdjByRouteResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetTimeAdjByRoute", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Provides a list of individual time adjustments (additions or cancellations) for a particular scheduled route.
func (service *WSF_x0020_ScheduleSoap) GetTimeAdjBySchedRoute(request *GetTimeAdjBySchedRoute) (*GetTimeAdjBySchedRouteResponse, error) {
	response := &GetTimeAdjBySchedRouteResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetTimeAdjBySchedRoute", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Retrieves sailing times associated with a specific route for the current date.  User may specify if only the times for the remainder of this sailing date are required.
func (service *WSF_x0020_ScheduleSoap) GetTodaysScheduleByRoute(request *GetTodaysScheduleByRoute) (*GetTodaysScheduleByRouteResponse, error) {
	response := &GetTodaysScheduleByRouteResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetTodaysScheduleByRoute", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Retrieves sailing times associated with a specific departing / arriving terminal combination for the current date.  User may specify if only the times for the remainder of this sailing date are required.
func (service *WSF_x0020_ScheduleSoap) GetTodaysScheduleByTerminalCombo(request *GetTodaysScheduleByTerminalCombo) (*GetTodaysScheduleByTerminalComboResponse, error) {
	response := &GetTodaysScheduleByTerminalComboResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetTodaysScheduleByTerminalCombo", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Reveals a valid date range for retrieving schedule data.  This begins with today's date and extends to the end of the most recently posted schedule.
func (service *WSF_x0020_ScheduleSoap) GetValidDateRange(request *GetValidDateRange) (*GetValidDateRangeResponse, error) {
	response := &GetValidDateRangeResponse{}
	err := service.client.Call("http://www.wsdot.wa.gov/ferries/schedule/GetValidDateRange", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

type WSF_x0020_ScheduleHttpGet struct {
	client *gowsdl.SoapClient
}

func NewWSF_x0020_ScheduleHttpGet(url string, tls bool) *WSF_x0020_ScheduleHttpGet {
	if url == "" {
		url = "http://b2b.wsdot.wa.gov/ferries/schedule/Default.asmx"
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &WSF_x0020_ScheduleHttpGet{
		client: client,
	}
}

type WSF_x0020_ScheduleHttpPost struct {
	client *gowsdl.SoapClient
}

func NewWSF_x0020_ScheduleHttpPost(url string, tls bool) *WSF_x0020_ScheduleHttpPost {
	if url == "" {
		url = "http://b2b.wsdot.wa.gov/ferries/schedule/Default.asmx"
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &WSF_x0020_ScheduleHttpPost{
		client: client,
	}
}
