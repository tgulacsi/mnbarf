package main

// Generated by https://github.com/cloudescape/gowsdl
// Do not modify
// Copyright (c) 2014, Cloudescape. All rights reserved.
import (
	"encoding/xml"
	"time"

	gowsdl "github.com/cloudescape/gowsdl/generator"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type duration string

const (
	duration_DAILY         duration = "DAILY"
	duration_MONTHLY       duration = "MONTHLY"
	duration_SEMIMONTHLY   duration = "SEMIMONTHLY"
	duration_WATER_YEAR    duration = "WATER_YEAR"
	duration_CALENDAR_YEAR duration = "CALENDAR_YEAR"
	duration_HOURLY        duration = "HOURLY"
	duration_SEASONAL      duration = "SEASONAL"
	duration_ANNUAL        duration = "ANNUAL"
)

type dataSource string

const (
	dataSource_OBSERVED    dataSource = "OBSERVED"
	dataSource_DERIVED     dataSource = "DERIVED"
	dataSource_INTERPRETED dataSource = "INTERPRETED"
)

type centralTendencyType string

const (
	centralTendencyType_AVERAGE centralTendencyType = "AVERAGE"
	centralTendencyType_MEDIAN  centralTendencyType = "MEDIAN"
	centralTendencyType_NORMAL  centralTendencyType = "NORMAL"
)

type instantaneousDataFilter string

const (
	instantaneousDataFilter_ALL           instantaneousDataFilter = "ALL"
	instantaneousDataFilter_FIRST_OF_DAY  instantaneousDataFilter = "FIRST_OF_DAY"
	instantaneousDataFilter_MIDNIGHT_ONLY instantaneousDataFilter = "MIDNIGHT_ONLY"
)

type unitSystem string

const (
	unitSystem_ENGLISH        unitSystem = "ENGLISH"
	unitSystem_LAST_COLLECTED unitSystem = "LAST_COLLECTED"
)

type getForecasts struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecasts"`

	StationTriplet string `xml:"stationTriplet,omitempty"`
	ElementCd      string `xml:"elementCd,omitempty"`
	ForecastPeriod string `xml:"forecastPeriod,omitempty"`
}

type getForecastsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastsResponse"`

	Return_ []*forecast `xml:"return,omitempty"`
}

type forecast struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService forecast"`

	CalculationDate         string    `xml:"calculationDate,omitempty"`
	ElementCd               string    `xml:"elementCd,omitempty"`
	ExceedenceProbabilities []int32   `xml:"exceedenceProbabilities,omitempty"`
	ExceedenceValues        []float64 `xml:"exceedenceValues,omitempty"`
	ForecastPeriod          string    `xml:"forecastPeriod,omitempty"`
	PeriodAverage           float64   `xml:"periodAverage,omitempty"`
	PublicationDate         string    `xml:"publicationDate,omitempty"`
	StationTriplet          string    `xml:"stationTriplet,omitempty"`
	UnitCd                  string    `xml:"unitCd,omitempty"`
}

type getStations struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStations"`

	StationIds   []string       `xml:"stationIds,omitempty"`
	StateCds     []string       `xml:"stateCds,omitempty"`
	NetworkCds   []string       `xml:"networkCds,omitempty"`
	Hucs         []string       `xml:"hucs,omitempty"`
	CountyNames  []string       `xml:"countyNames,omitempty"`
	MinLatitude  float64        `xml:"minLatitude,omitempty"`
	MaxLatitude  float64        `xml:"maxLatitude,omitempty"`
	MinLongitude float64        `xml:"minLongitude,omitempty"`
	MaxLongitude float64        `xml:"maxLongitude,omitempty"`
	MinElevation float64        `xml:"minElevation,omitempty"`
	MaxElevation float64        `xml:"maxElevation,omitempty"`
	ElementCds   []string       `xml:"elementCds,omitempty"`
	Ordinals     []int32        `xml:"ordinals,omitempty"`
	HeightDepths []*heightDepth `xml:"heightDepths,omitempty"`
	LogicalAnd   bool           `xml:"logicalAnd,omitempty"`
}

type heightDepth struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService heightDepth"`

	UnitCd string  `xml:"unitCd,omitempty"`
	Value  float64 `xml:"value,omitempty"`
}

type getStationsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationsResponse"`

	Return_ []string `xml:"return,omitempty"`
}

type getForecastsByPubDate struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastsByPubDate"`

	StationTriplet       string `xml:"stationTriplet,omitempty"`
	ElementCd            string `xml:"elementCd,omitempty"`
	ForecastPeriod       string `xml:"forecastPeriod,omitempty"`
	BeginPublicationDate string `xml:"beginPublicationDate,omitempty"`
	EndPublicationDate   string `xml:"endPublicationDate,omitempty"`
}

type getForecastsByPubDateResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastsByPubDateResponse"`

	Return_ []*forecast `xml:"return,omitempty"`
}

type getAveragesData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getAveragesData"`

	StationTriplets []string     `xml:"stationTriplets,omitempty"`
	ElementCd       string       `xml:"elementCd,omitempty"`
	HeightDepth     *heightDepth `xml:"heightDepth,omitempty"`
	Duration        *duration    `xml:"duration,omitempty"`
	GetFlags        bool         `xml:"getFlags,omitempty"`
	BeginMonth      int32        `xml:"beginMonth,omitempty"`
	BeginDay        int32        `xml:"beginDay,omitempty"`
	EndMonth        int32        `xml:"endMonth,omitempty"`
	EndDay          int32        `xml:"endDay,omitempty"`
}

type getAveragesDataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getAveragesDataResponse"`

	Return_ []*averagesData `xml:"return,omitempty"`
}

type averagesData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService averagesData"`

	BeginDay    int32     `xml:"beginDay,omitempty"`
	BeginMonth  int32     `xml:"beginMonth,omitempty"`
	DataSetFlag string    `xml:"dataSetFlag,omitempty"`
	Duration    *duration `xml:"duration,omitempty"`
	EndDay      int32     `xml:"endDay,omitempty"`
	EndMonth    int32     `xml:"endMonth,omitempty"`
	Flags       []string  `xml:"flags,omitempty"`
	Values      []float64 `xml:"values,omitempty"`
}

type runDiagnostics struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService runDiagnostics"`
}

type runDiagnosticsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService runDiagnosticsResponse"`

	Return_ *diagnostics `xml:"return,omitempty"`
}

type diagnostics struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService diagnostics"`

	HasSucceeded bool                    `xml:"hasSucceeded,omitempty"`
	TestResults  []*diagnosticTestResult `xml:"testResults,omitempty"`
}

type diagnosticTestResult struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService diagnosticTestResult"`

	ErrorMessage    string               `xml:"errorMessage,omitempty"`
	Exception       *diagnosticException `xml:"exception,omitempty"`
	HasSucceeded    bool                 `xml:"hasSucceeded,omitempty"`
	TestDescription string               `xml:"testDescription,omitempty"`
}

type diagnosticException struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService diagnosticException"`

	Cause          *diagnosticException           `xml:"cause,omitempty"`
	ExceptionClass string                         `xml:"exceptionClass,omitempty"`
	Message        string                         `xml:"message,omitempty"`
	StrackTrace    []*diagnosticStackTraceElement `xml:"strackTrace,omitempty"`
}

type diagnosticStackTraceElement struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService diagnosticStackTraceElement"`

	ClassName  string `xml:"className,omitempty"`
	FileName   string `xml:"fileName,omitempty"`
	LineNumber int32  `xml:"lineNumber,omitempty"`
	MethodName string `xml:"methodName,omitempty"`
}

type getHourlyData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getHourlyData"`

	StationTriplets []string     `xml:"stationTriplets,omitempty"`
	ElementCd       string       `xml:"elementCd,omitempty"`
	Ordinal         int32        `xml:"ordinal,omitempty"`
	HeightDepth     *heightDepth `xml:"heightDepth,omitempty"`
	BeginDate       string       `xml:"beginDate,omitempty"`
	EndDate         string       `xml:"endDate,omitempty"`
	BeginHour       int32        `xml:"beginHour,omitempty"`
	EndHour         int32        `xml:"endHour,omitempty"`
}

type getHourlyDataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getHourlyDataResponse"`

	Return_ []*hourlyData `xml:"return,omitempty"`
}

type hourlyData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService hourlyData"`

	BeginDate      string             `xml:"beginDate,omitempty"`
	EndDate        string             `xml:"endDate,omitempty"`
	StationTriplet string             `xml:"stationTriplet,omitempty"`
	Values         []*hourlyDataValue `xml:"values,omitempty"`
}

type hourlyDataValue struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService hourlyDataValue"`

	DateTime string  `xml:"dateTime,omitempty"`
	Flag     string  `xml:"flag,omitempty"`
	Value    float64 `xml:"value,omitempty"`
}

type getForecastEquations struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastEquations"`

	StationTriplet string `xml:"stationTriplet,omitempty"`
}

type getForecastEquationsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastEquationsResponse"`

	Return_ []*forecastEquation `xml:"return,omitempty"`
}

type forecastEquation struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService forecastEquation"`

	Comment                        string                  `xml:"comment,omitempty"`
	DataSource                     string                  `xml:"dataSource,omitempty"`
	ElementCd                      string                  `xml:"elementCd,omitempty"`
	EquationTerms                  []*forecastEquationTerm `xml:"equationTerms,omitempty"`
	Footnotes                      string                  `xml:"footnotes,omitempty"`
	ForecastCondition              string                  `xml:"forecastCondition,omitempty"`
	ForecastPeriod                 string                  `xml:"forecastPeriod,omitempty"`
	ForecastType                   string                  `xml:"forecastType,omitempty"`
	Function                       string                  `xml:"function,omitempty"`
	FunctionArgument               float64                 `xml:"functionArgument,omitempty"`
	InterceptConstant              float64                 `xml:"interceptConstant,omitempty"`
	Key                            int32                   `xml:"key,omitempty"`
	MaxOfRecord                    float64                 `xml:"maxOfRecord,omitempty"`
	MinOfRecord                    float64                 `xml:"minOfRecord,omitempty"`
	MonthlyCorrelationCoefficients []float64               `xml:"monthlyCorrelationCoefficients,omitempty"`
	MonthlyStderrValues            []float64               `xml:"monthlyStderrValues,omitempty"`
	Name                           string                  `xml:"name,omitempty"`
	PublicationMonthsAndDays       []*monthAndDay          `xml:"publicationMonthsAndDays,omitempty"`
	Published                      bool                    `xml:"published,omitempty"`
	StationTriplet                 string                  `xml:"stationTriplet,omitempty"`
	TransformErrorsOnly            bool                    `xml:"transformErrorsOnly,omitempty"`
	UnitCd                         string                  `xml:"unitCd,omitempty"`
}

type forecastEquationTerm struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService forecastEquationTerm"`

	Coefficient      float64         `xml:"coefficient,omitempty"`
	DataPeriodDays   string          `xml:"dataPeriodDays,omitempty"`
	DataPeriodMonth  string          `xml:"dataPeriodMonth,omitempty"`
	DataYearFlag     string          `xml:"dataYearFlag,omitempty"`
	StationElement   *stationElement `xml:"stationElement,omitempty"`
	UnitCd           string          `xml:"unitCd,omitempty"`
	UpstreamForecast bool            `xml:"upstreamForecast,omitempty"`
}

type stationElement struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService stationElement"`

	BeginDate      string       `xml:"beginDate,omitempty"`
	DataPrecision  int32        `xml:"dataPrecision,omitempty"`
	DataSource     *dataSource  `xml:"dataSource,omitempty"`
	Duration       *duration    `xml:"duration,omitempty"`
	ElementCd      string       `xml:"elementCd,omitempty"`
	EndDate        string       `xml:"endDate,omitempty"`
	HeightDepth    *heightDepth `xml:"heightDepth,omitempty"`
	Ordinal        int32        `xml:"ordinal,omitempty"`
	OriginalUnitCd string       `xml:"originalUnitCd,omitempty"`
	StationTriplet string       `xml:"stationTriplet,omitempty"`
	StoredUnitCd   string       `xml:"storedUnitCd,omitempty"`
}

type monthAndDay struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService monthAndDay"`

	Day   int32 `xml:"day,omitempty"`
	Month int32 `xml:"month,omitempty"`
}

type getUnitName struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getUnitName"`

	UnitCd string `xml:"unitCd,omitempty"`
}

type getUnitNameResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getUnitNameResponse"`

	Return_ string `xml:"return,omitempty"`
}

type getStationMetadataMultiple struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationMetadataMultiple"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`
}

type getStationMetadataMultipleResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationMetadataMultipleResponse"`

	Return_ []*stationMetaData `xml:"return,omitempty"`
}

type stationMetaData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService stationMetaData"`

	ActonId             string  `xml:"actonId,omitempty"`
	BeginDate           string  `xml:"beginDate,omitempty"`
	CountyName          string  `xml:"countyName,omitempty"`
	Elevation           float64 `xml:"elevation,omitempty"`
	EndDate             string  `xml:"endDate,omitempty"`
	FipsCountryCd       string  `xml:"fipsCountryCd,omitempty"`
	FipsCountyCd        string  `xml:"fipsCountyCd,omitempty"`
	FipsStateNumber     string  `xml:"fipsStateNumber,omitempty"`
	Huc                 string  `xml:"huc,omitempty"`
	Hud                 string  `xml:"hud,omitempty"`
	Latitude            float64 `xml:"latitude,omitempty"`
	Longitude           float64 `xml:"longitude,omitempty"`
	Name                string  `xml:"name,omitempty"`
	ShefId              string  `xml:"shefId,omitempty"`
	StationDataTimeZone float64 `xml:"stationDataTimeZone,omitempty"`
	StationTimeZone     float64 `xml:"stationTimeZone,omitempty"`
	StationTriplet      string  `xml:"stationTriplet,omitempty"`
}

type getForecastPoint struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPoint"`

	StationTriplet string `xml:"stationTriplet,omitempty"`
}

type getForecastPointResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPointResponse"`

	Return_ *forecastPoint `xml:"return,omitempty"`
}

type forecastPoint struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService forecastPoint"`

	ExceedenceProbabilities []int32 `xml:"exceedenceProbabilities,omitempty"`
	Name                    string  `xml:"name,omitempty"`
	ResponsibleForecaster   string  `xml:"responsibleForecaster,omitempty"`
	StationTriplet          string  `xml:"stationTriplet,omitempty"`
}

type getStationDataAssuredFlags struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationDataAssuredFlags"`

	StationTriplets []string     `xml:"stationTriplets,omitempty"`
	ElementCd       string       `xml:"elementCd,omitempty"`
	Ordinal         int32        `xml:"ordinal,omitempty"`
	HeightDepth     *heightDepth `xml:"heightDepth,omitempty"`
	DurationCd      string       `xml:"durationCd,omitempty"`
	BeginWaterYear  int32        `xml:"beginWaterYear,omitempty"`
	EndWaterYear    int32        `xml:"endWaterYear,omitempty"`
}

type getStationDataAssuredFlagsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationDataAssuredFlagsResponse"`

	Return_ []*stationDataAssuredFlags `xml:"return,omitempty"`
}

type stationDataAssuredFlags struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService stationDataAssuredFlags"`

	AssuredFlags   []string `xml:"assuredFlags,omitempty"`
	StationTriplet string   `xml:"stationTriplet,omitempty"`
}

type getForecastEquationsMultiple struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastEquationsMultiple"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`
}

type getForecastEquationsMultipleResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastEquationsMultipleResponse"`

	Return_ []*forecastEquation `xml:"return,omitempty"`
}

type getForecastPeriodCentralTendency struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPeriodCentralTendency"`

	StationTriplets     []string             `xml:"stationTriplets,omitempty"`
	ElementCd           string               `xml:"elementCd,omitempty"`
	Periods             []string             `xml:"periods,omitempty"`
	CentralTendencyType *centralTendencyType `xml:"centralTendencyType,omitempty"`
}

type getForecastPeriodCentralTendencyResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPeriodCentralTendencyResponse"`

	Return_ []*forecastPeriodCentralTendency `xml:"return,omitempty"`
}

type forecastPeriodCentralTendency struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService forecastPeriodCentralTendency"`

	*forecastPeriodAverage

	CentralTendencyType *centralTendencyType `xml:"centralTendencyType,omitempty"`
}

type forecastPeriodAverage struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService forecastPeriodAverage"`

	Flag           string  `xml:"flag,omitempty"`
	ForecastPeriod string  `xml:"forecastPeriod,omitempty"`
	StationTriplet string  `xml:"stationTriplet,omitempty"`
	Value          float64 `xml:"value,omitempty"`
}

type getForecastValue struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastValue"`

	StationTriplet   string `xml:"stationTriplet,omitempty"`
	ElementCd        string `xml:"elementCd,omitempty"`
	ForecastPeriod   string `xml:"forecastPeriod,omitempty"`
	Probability      int32  `xml:"probability,omitempty"`
	PublicationYear  int32  `xml:"publicationYear,omitempty"`
	PublicationMonth int32  `xml:"publicationMonth,omitempty"`
	PublicationDay   int32  `xml:"publicationDay,omitempty"`
}

type getForecastValueResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastValueResponse"`

	Return_ float64 `xml:"return,omitempty"`
}

type getElement struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getElement"`

	ElementCd string `xml:"elementCd,omitempty"`
}

type getElementResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getElementResponse"`

	Return_ *element `xml:"return,omitempty"`
}

type element struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService element"`

	ElementCd    string `xml:"elementCd,omitempty"`
	Name         string `xml:"name,omitempty"`
	StoredUnitCd string `xml:"storedUnitCd,omitempty"`
}

type getForecastConfigurations struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastConfigurations"`

	Forecaster string `xml:"forecaster,omitempty"`
}

type getForecastConfigurationsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastConfigurationsResponse"`

	Return_ []*configuration `xml:"return,omitempty"`
}

type configuration struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService configuration"`

	AnalysisType                    string            `xml:"analysisType,omitempty"`
	CalibrationEndYear              int32             `xml:"calibrationEndYear,omitempty"`
	CalibrationStartYear            int32             `xml:"calibrationStartYear,omitempty"`
	Comment                         string            `xml:"comment,omitempty"`
	ComponentsToRetain              int32             `xml:"componentsToRetain,omitempty"`
	CreationDate                    string            `xml:"creationDate,omitempty"`
	DailyForecast                   bool              `xml:"dailyForecast,omitempty"`
	DailyForecastThreshold          float64           `xml:"dailyForecastThreshold,omitempty"`
	DailyForecastThresholdRelative  bool              `xml:"dailyForecastThresholdRelative,omitempty"`
	DataForcedSeriallyComplete      bool              `xml:"dataForcedSeriallyComplete,omitempty"`
	DegreesOfFreedom                int32             `xml:"degreesOfFreedom,omitempty"`
	ForecastCondition               string            `xml:"forecastCondition,omitempty"`
	ForecastType                    string            `xml:"forecastType,omitempty"`
	Forecaster                      string            `xml:"forecaster,omitempty"`
	FunctionArgument                float64           `xml:"functionArgument,omitempty"`
	FunctionCd                      string            `xml:"functionCd,omitempty"`
	HelperDataSource                string            `xml:"helperDataSource,omitempty"`
	HelperElementCd                 string            `xml:"helperElementCd,omitempty"`
	HelperEndDay                    int32             `xml:"helperEndDay,omitempty"`
	HelperEndMonth                  int32             `xml:"helperEndMonth,omitempty"`
	HelperEndYearFlag               string            `xml:"helperEndYearFlag,omitempty"`
	HelperMixedPastEndDay           int32             `xml:"helperMixedPastEndDay,omitempty"`
	HelperMixedPastEndMonth         int32             `xml:"helperMixedPastEndMonth,omitempty"`
	HelperMixedPastEndYearFlag      string            `xml:"helperMixedPastEndYearFlag,omitempty"`
	HelperMixedPastStartDay         int32             `xml:"helperMixedPastStartDay,omitempty"`
	HelperMixedPastStartMonth       int32             `xml:"helperMixedPastStartMonth,omitempty"`
	HelperMixedPastStartYearFlag    string            `xml:"helperMixedPastStartYearFlag,omitempty"`
	HelperPredictorUsed             bool              `xml:"helperPredictorUsed,omitempty"`
	HelperStartDay                  int32             `xml:"helperStartDay,omitempty"`
	HelperStartMonth                int32             `xml:"helperStartMonth,omitempty"`
	HelperStartYearFlag             string            `xml:"helperStartYearFlag,omitempty"`
	HelperStationTriplet            string            `xml:"helperStationTriplet,omitempty"`
	HelperUsedInOverlappingYears    bool              `xml:"helperUsedInOverlappingYears,omitempty"`
	HelperVarianceMatchedToObserved bool              `xml:"helperVarianceMatchedToObserved,omitempty"`
	JackKnifingUsed                 bool              `xml:"jackKnifingUsed,omitempty"`
	Key                             int32             `xml:"key,omitempty"`
	MinimumR2ForPredictor           float64           `xml:"minimumR2ForPredictor,omitempty"`
	MinimumYearsForPredictor        int32             `xml:"minimumYearsForPredictor,omitempty"`
	MixedPastEndDay                 int32             `xml:"mixedPastEndDay,omitempty"`
	MixedPastEndMonth               int32             `xml:"mixedPastEndMonth,omitempty"`
	MixedPastEndYearFlag            string            `xml:"mixedPastEndYearFlag,omitempty"`
	MixedPastStartDay               int32             `xml:"mixedPastStartDay,omitempty"`
	MixedPastStartMonth             int32             `xml:"mixedPastStartMonth,omitempty"`
	MixedPastStartYearFlag          string            `xml:"mixedPastStartYearFlag,omitempty"`
	MixedPastUsed                   bool              `xml:"mixedPastUsed,omitempty"`
	Name                            string            `xml:"name,omitempty"`
	NumYearsUsed                    int32             `xml:"numYearsUsed,omitempty"`
	OptimalWeightingUsed            bool              `xml:"optimalWeightingUsed,omitempty"`
	OverrideAverage                 float64           `xml:"overrideAverage,omitempty"`
	OverrideStderr                  float64           `xml:"overrideStderr,omitempty"`
	PastFlowRealtime                float64           `xml:"pastFlowRealtime,omitempty"`
	PredictorGroups                 []*predictorGroup `xml:"predictorGroups,omitempty"`
	Predictors                      []*predictor      `xml:"predictors,omitempty"`
	PreprocessingConstant           float64           `xml:"preprocessingConstant,omitempty"`
	PreprocessingMultiplier         float64           `xml:"preprocessingMultiplier,omitempty"`
	PublicationCd                   string            `xml:"publicationCd,omitempty"`
	TTestLimit                      float64           `xml:"TTestLimit,omitempty"`
	TargetDataSource                string            `xml:"targetDataSource,omitempty"`
	TargetElementCd                 string            `xml:"targetElementCd,omitempty"`
	TargetEndDay                    int32             `xml:"targetEndDay,omitempty"`
	TargetEndMonth                  int32             `xml:"targetEndMonth,omitempty"`
	TargetEndYearFlag               string            `xml:"targetEndYearFlag,omitempty"`
	TargetStartDay                  int32             `xml:"targetStartDay,omitempty"`
	TargetStartMonth                int32             `xml:"targetStartMonth,omitempty"`
	TargetStartYearFlag             string            `xml:"targetStartYearFlag,omitempty"`
	TargetStationName               string            `xml:"targetStationName,omitempty"`
	TargetStationTriplet            string            `xml:"targetStationTriplet,omitempty"`
	TransformErrorsOnly             bool              `xml:"transformErrorsOnly,omitempty"`
}

type predictorGroup struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService predictorGroup"`

	CustomStationListName    string `xml:"customStationListName,omitempty"`
	DataSourceCd             string `xml:"dataSourceCd,omitempty"`
	ElementCd                string `xml:"elementCd,omitempty"`
	GlobalMonthChangeAllowed bool   `xml:"globalMonthChangeAllowed,omitempty"`
	GroupName                string `xml:"groupName,omitempty"`
	GroupNumber              int32  `xml:"groupNumber,omitempty"`
	NegativeWeightAllowed    bool   `xml:"negativeWeightAllowed,omitempty"`
	Networks                 string `xml:"networks,omitempty"`
	States                   string `xml:"states,omitempty"`
	UpstreamForecast         bool   `xml:"upstreamForecast,omitempty"`
}

type predictor struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService predictor"`

	EndDay          int32  `xml:"endDay,omitempty"`
	EndMonth        int32  `xml:"endMonth,omitempty"`
	EndYearFlag     string `xml:"endYearFlag,omitempty"`
	GroupNumber     int32  `xml:"groupNumber,omitempty"`
	PredictorNumber int32  `xml:"predictorNumber,omitempty"`
	PredictorUsed   bool   `xml:"predictorUsed,omitempty"`
	StartDay        int32  `xml:"startDay,omitempty"`
	StartMonth      int32  `xml:"startMonth,omitempty"`
	StartYearFlag   string `xml:"startYearFlag,omitempty"`
	StationTriplet  string `xml:"stationTriplet,omitempty"`
}

type getReservoirMetadataMultiple struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getReservoirMetadataMultiple"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`
}

type getReservoirMetadataMultipleResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getReservoirMetadataMultipleResponse"`

	Return_ []*reservoirMetadata `xml:"return,omitempty"`
}

type reservoirMetadata struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService reservoirMetadata"`

	ElevationAtCapacity float64 `xml:"elevationAtCapacity,omitempty"`
	ReservoirCapacity   float64 `xml:"reservoirCapacity,omitempty"`
	StationTriplet      string  `xml:"stationTriplet,omitempty"`
	UsableCapacity      float64 `xml:"usableCapacity,omitempty"`
}

type getCentralTendencyPeakData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getCentralTendencyPeakData"`

	StationTriplets     []string             `xml:"stationTriplets,omitempty"`
	ElementCd           string               `xml:"elementCd,omitempty"`
	HeightDepth         *heightDepth         `xml:"heightDepth,omitempty"`
	Duration            *duration            `xml:"duration,omitempty"`
	GetFlags            bool                 `xml:"getFlags,omitempty"`
	CentralTendencyType *centralTendencyType `xml:"centralTendencyType,omitempty"`
}

type getCentralTendencyPeakDataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getCentralTendencyPeakDataResponse"`

	Return_ []*centralTendencyPeakData `xml:"return,omitempty"`
}

type centralTendencyPeakData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService centralTendencyPeakData"`

	*averagesPeakData

	CentralTendencyType *centralTendencyType `xml:"centralTendencyType,omitempty"`
}

type averagesPeakData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService averagesPeakData"`

	Duration  *duration `xml:"duration,omitempty"`
	Flag      string    `xml:"flag,omitempty"`
	PeakDay   int32     `xml:"peakDay,omitempty"`
	PeakMonth int32     `xml:"peakMonth,omitempty"`
	Value     float64   `xml:"value,omitempty"`
}

type getForecast struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecast"`

	StationTriplet  string `xml:"stationTriplet,omitempty"`
	ElementCd       string `xml:"elementCd,omitempty"`
	ForecastPeriod  string `xml:"forecastPeriod,omitempty"`
	PublicationDate string `xml:"publicationDate,omitempty"`
}

type getForecastResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastResponse"`

	Return_ *forecast `xml:"return,omitempty"`
}

type getReservoirMetadata struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getReservoirMetadata"`

	StationTriplet string `xml:"stationTriplet,omitempty"`
}

type getReservoirMetadataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getReservoirMetadataResponse"`

	Return_ *reservoirMetadata `xml:"return,omitempty"`
}

type getForecastPeriodAverages struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPeriodAverages"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`
	ElementCd       string   `xml:"elementCd,omitempty"`
	Periods         []string `xml:"periods,omitempty"`
}

type getForecastPeriodAveragesResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPeriodAveragesResponse"`

	Return_ []*forecastPeriodAverage `xml:"return,omitempty"`
}

type getAllForecastsForStation struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getAllForecastsForStation"`

	StationTriplet       string `xml:"stationTriplet,omitempty"`
	BeginPublicationDate string `xml:"beginPublicationDate,omitempty"`
	EndPublicationDate   string `xml:"endPublicationDate,omitempty"`
}

type getAllForecastsForStationResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getAllForecastsForStationResponse"`

	Return_ []*forecastFull `xml:"return,omitempty"`
}

type forecastFull struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService forecastFull"`

	Comment                          string            `xml:"comment,omitempty"`
	Configuration                    *configuration    `xml:"configuration,omitempty"`
	CoordinatedForecastIssueDate     string            `xml:"coordinatedForecastIssueDate,omitempty"`
	CoordinatedForecastProbabilities []float64         `xml:"coordinatedForecastProbabilities,omitempty"`
	CoordinatedForecastValues        []float64         `xml:"coordinatedForecastValues,omitempty"`
	ElementCd                        string            `xml:"elementCd,omitempty"`
	Equation                         *forecastEquation `xml:"equation,omitempty"`
	ForecastFinal                    bool              `xml:"forecastFinal,omitempty"`
	ForecastPeriodCd                 string            `xml:"forecastPeriodCd,omitempty"`
	ForecastPeriodName               string            `xml:"forecastPeriodName,omitempty"`
	Forecaster                       string            `xml:"forecaster,omitempty"`
	HydrologistForecastIssueDate     string            `xml:"hydrologistForecastIssueDate,omitempty"`
	HydrologistForecastProbabilities []float64         `xml:"hydrologistForecastProbabilities,omitempty"`
	HydrologistForecastValues        []float64         `xml:"hydrologistForecastValues,omitempty"`
	OriginalForecastIssueDate        string            `xml:"originalForecastIssueDate,omitempty"`
	OriginalForecastProbabilities    []float64         `xml:"originalForecastProbabilities,omitempty"`
	OriginalForecastValues           []float64         `xml:"originalForecastValues,omitempty"`
	OtherAgencyCds                   []string          `xml:"otherAgencyCds,omitempty"`
	OtherAgencyForecastValues        []float64         `xml:"otherAgencyForecastValues,omitempty"`
	PeriodAverage                    float64           `xml:"periodAverage,omitempty"`
	PublicationDate                  string            `xml:"publicationDate,omitempty"`
	StationTriplet                   string            `xml:"stationTriplet,omitempty"`
	UnitCd                           string            `xml:"unitCd,omitempty"`
}

type getStationElements struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationElements"`

	StationTriplet string `xml:"stationTriplet,omitempty"`
	BeginDate      string `xml:"beginDate,omitempty"`
	EndDate        string `xml:"endDate,omitempty"`
}

type getStationElementsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationElementsResponse"`

	Return_ []*stationElement `xml:"return,omitempty"`
}

type getInstantaneousData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getInstantaneousData"`

	StationTriplets []string                 `xml:"stationTriplets,omitempty"`
	ElementCd       string                   `xml:"elementCd,omitempty"`
	Ordinal         int32                    `xml:"ordinal,omitempty"`
	HeightDepth     *heightDepth             `xml:"heightDepth,omitempty"`
	BeginDate       string                   `xml:"beginDate,omitempty"`
	EndDate         string                   `xml:"endDate,omitempty"`
	Filter          *instantaneousDataFilter `xml:"filter,omitempty"`
	UnitSystem      *unitSystem              `xml:"unitSystem,omitempty"`
}

type getInstantaneousDataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getInstantaneousDataResponse"`

	Return_ []*instantaneousData `xml:"return,omitempty"`
}

type instantaneousData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService instantaneousData"`

	BeginDate string                    `xml:"beginDate,omitempty"`
	EndDate   string                    `xml:"endDate,omitempty"`
	StationId int32                     `xml:"stationId,omitempty"`
	UnitCd    string                    `xml:"unitCd,omitempty"`
	Values    []*instantaneousDataValue `xml:"values,omitempty"`
}

type instantaneousDataValue struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService instantaneousDataValue"`

	Flag  string  `xml:"flag,omitempty"`
	Time  string  `xml:"time,omitempty"`
	Value float64 `xml:"value,omitempty"`
}

type getData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getData"`

	StationTriplets        []string     `xml:"stationTriplets,omitempty"`
	ElementCd              string       `xml:"elementCd,omitempty"`
	Ordinal                int32        `xml:"ordinal,omitempty"`
	HeightDepth            *heightDepth `xml:"heightDepth,omitempty"`
	Duration               *duration    `xml:"duration,omitempty"`
	GetFlags               bool         `xml:"getFlags,omitempty"`
	BeginDate              string       `xml:"beginDate,omitempty"`
	EndDate                string       `xml:"endDate,omitempty"`
	AlwaysReturnDailyFeb29 bool         `xml:"alwaysReturnDailyFeb29,omitempty"`
}

type getDataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getDataResponse"`

	Return_ []*data `xml:"return,omitempty"`
}

type data struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService data"`

	BeginDate string    `xml:"beginDate,omitempty"`
	Duration  *duration `xml:"duration,omitempty"`
	EndDate   string    `xml:"endDate,omitempty"`
	Flags     []string  `xml:"flags,omitempty"`
	Values    []float64 `xml:"values,omitempty"`
}

type getCentralTendencyData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getCentralTendencyData"`

	StationTriplets     []string             `xml:"stationTriplets,omitempty"`
	ElementCd           string               `xml:"elementCd,omitempty"`
	HeightDepth         *heightDepth         `xml:"heightDepth,omitempty"`
	Duration            *duration            `xml:"duration,omitempty"`
	GetFlags            bool                 `xml:"getFlags,omitempty"`
	BeginMonth          int32                `xml:"beginMonth,omitempty"`
	BeginDay            int32                `xml:"beginDay,omitempty"`
	EndMonth            int32                `xml:"endMonth,omitempty"`
	EndDay              int32                `xml:"endDay,omitempty"`
	CentralTendencyType *centralTendencyType `xml:"centralTendencyType,omitempty"`
}

type getCentralTendencyDataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getCentralTendencyDataResponse"`

	Return_ []*centralTendencyData `xml:"return,omitempty"`
}

type centralTendencyData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService centralTendencyData"`

	*averagesData

	CentralTendencyType *centralTendencyType `xml:"centralTendencyType,omitempty"`
}

type getForecastPeriods struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPeriods"`
}

type getForecastPeriodsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPeriodsResponse"`

	Return_ []*forecastPeriod `xml:"return,omitempty"`
}

type forecastPeriod struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService forecastPeriod"`

	Description    string `xml:"description,omitempty"`
	ForecastPeriod string `xml:"forecastPeriod,omitempty"`
}

type getHeightDepths struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getHeightDepths"`
}

type getHeightDepthsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getHeightDepthsResponse"`

	Return_ []*heightDepth `xml:"return,omitempty"`
}

type getStationMetadata struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationMetadata"`

	StationTriplet string `xml:"stationTriplet,omitempty"`
}

type getStationMetadataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationMetadataResponse"`

	Return_ *stationMetaData `xml:"return,omitempty"`
}

type getForecastPoints struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPoints"`

	StationIds         []string `xml:"stationIds,omitempty"`
	StateCds           []string `xml:"stateCds,omitempty"`
	NetworkCds         []string `xml:"networkCds,omitempty"`
	ForecastPointNames []string `xml:"forecastPointNames,omitempty"`
	Hucs               []string `xml:"hucs,omitempty"`
	Forecasters        []string `xml:"forecasters,omitempty"`
	LogicalAnd         bool     `xml:"logicalAnd,omitempty"`
}

type getForecastPointsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPointsResponse"`

	Return_ []*forecastPoint `xml:"return,omitempty"`
}

type areYouThere struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService areYouThere"`
}

type areYouThereResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService areYouThereResponse"`

	Return_ bool `xml:"return,omitempty"`
}

type getPeakData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getPeakData"`

	StationTriplets []string     `xml:"stationTriplets,omitempty"`
	ElementCd       string       `xml:"elementCd,omitempty"`
	Ordinal         int32        `xml:"ordinal,omitempty"`
	HeightDepth     *heightDepth `xml:"heightDepth,omitempty"`
	Duration        *duration    `xml:"duration,omitempty"`
	GetFlags        bool         `xml:"getFlags,omitempty"`
	BeginYear       int32        `xml:"beginYear,omitempty"`
	EndYear         int32        `xml:"endYear,omitempty"`
}

type getPeakDataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getPeakDataResponse"`

	Return_ []*peakData `xml:"return,omitempty"`
}

type peakData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService peakData"`

	BeginYear  int32     `xml:"beginYear,omitempty"`
	Duration   *duration `xml:"duration,omitempty"`
	EndYear    int32     `xml:"endYear,omitempty"`
	Flags      []string  `xml:"flags,omitempty"`
	PeakDays   []int32   `xml:"peakDays,omitempty"`
	PeakMonths []int32   `xml:"peakMonths,omitempty"`
	Values     []float64 `xml:"values,omitempty"`
}

type getAveragesPeak struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getAveragesPeak"`

	StationTriplets []string     `xml:"stationTriplets,omitempty"`
	ElementCd       string       `xml:"elementCd,omitempty"`
	HeightDepth     *heightDepth `xml:"heightDepth,omitempty"`
	Duration        *duration    `xml:"duration,omitempty"`
	GetFlags        bool         `xml:"getFlags,omitempty"`
}

type getAveragesPeakResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getAveragesPeakResponse"`

	Return_ []*averagesPeakData `xml:"return,omitempty"`
}

type getUnits struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getUnits"`
}

type getUnitsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getUnitsResponse"`

	Return_ []*unit `xml:"return,omitempty"`
}

type unit struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService unit"`

	Name   string `xml:"name,omitempty"`
	UnitCd string `xml:"unitCd,omitempty"`
}

type getElements struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getElements"`
}

type getElementsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getElementsResponse"`

	Return_ []*element `xml:"return,omitempty"`
}

type AwdbWebService struct {
	client *gowsdl.SoapClient
}

func NewAwdbWebService(url string, tls bool) *AwdbWebService {
	if url == "" {
		url = ""
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &AwdbWebService{
		client: client,
	}
}

func (service *AwdbWebService) GetForecasts(request *getForecasts) (*getForecastsResponse, error) {
	response := &getForecastsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetStations(request *getStations) (*getStationsResponse, error) {
	response := &getStationsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastsByPubDate(request *getForecastsByPubDate) (*getForecastsByPubDateResponse, error) {
	response := &getForecastsByPubDateResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetAveragesData(request *getAveragesData) (*getAveragesDataResponse, error) {
	response := &getAveragesDataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) RunDiagnostics(request *runDiagnostics) (*runDiagnosticsResponse, error) {
	response := &runDiagnosticsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetHourlyData(request *getHourlyData) (*getHourlyDataResponse, error) {
	response := &getHourlyDataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastEquations(request *getForecastEquations) (*getForecastEquationsResponse, error) {
	response := &getForecastEquationsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetUnitName(request *getUnitName) (*getUnitNameResponse, error) {
	response := &getUnitNameResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetStationMetadataMultiple(request *getStationMetadataMultiple) (*getStationMetadataMultipleResponse, error) {
	response := &getStationMetadataMultipleResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastPoint(request *getForecastPoint) (*getForecastPointResponse, error) {
	response := &getForecastPointResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetStationDataAssuredFlags(request *getStationDataAssuredFlags) (*getStationDataAssuredFlagsResponse, error) {
	response := &getStationDataAssuredFlagsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastEquationsMultiple(request *getForecastEquationsMultiple) (*getForecastEquationsMultipleResponse, error) {
	response := &getForecastEquationsMultipleResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastPeriodCentralTendency(request *getForecastPeriodCentralTendency) (*getForecastPeriodCentralTendencyResponse, error) {
	response := &getForecastPeriodCentralTendencyResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastValue(request *getForecastValue) (*getForecastValueResponse, error) {
	response := &getForecastValueResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetElement(request *getElement) (*getElementResponse, error) {
	response := &getElementResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastConfigurations(request *getForecastConfigurations) (*getForecastConfigurationsResponse, error) {
	response := &getForecastConfigurationsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetReservoirMetadataMultiple(request *getReservoirMetadataMultiple) (*getReservoirMetadataMultipleResponse, error) {
	response := &getReservoirMetadataMultipleResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetCentralTendencyPeakData(request *getCentralTendencyPeakData) (*getCentralTendencyPeakDataResponse, error) {
	response := &getCentralTendencyPeakDataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecast(request *getForecast) (*getForecastResponse, error) {
	response := &getForecastResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetReservoirMetadata(request *getReservoirMetadata) (*getReservoirMetadataResponse, error) {
	response := &getReservoirMetadataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastPeriodAverages(request *getForecastPeriodAverages) (*getForecastPeriodAveragesResponse, error) {
	response := &getForecastPeriodAveragesResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetAllForecastsForStation(request *getAllForecastsForStation) (*getAllForecastsForStationResponse, error) {
	response := &getAllForecastsForStationResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetStationElements(request *getStationElements) (*getStationElementsResponse, error) {
	response := &getStationElementsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetInstantaneousData(request *getInstantaneousData) (*getInstantaneousDataResponse, error) {
	response := &getInstantaneousDataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetData(request *getData) (*getDataResponse, error) {
	response := &getDataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetCentralTendencyData(request *getCentralTendencyData) (*getCentralTendencyDataResponse, error) {
	response := &getCentralTendencyDataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastPeriods(request *getForecastPeriods) (*getForecastPeriodsResponse, error) {
	response := &getForecastPeriodsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetHeightDepths(request *getHeightDepths) (*getHeightDepthsResponse, error) {
	response := &getHeightDepthsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetStationMetadata(request *getStationMetadata) (*getStationMetadataResponse, error) {
	response := &getStationMetadataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastPoints(request *getForecastPoints) (*getForecastPointsResponse, error) {
	response := &getForecastPointsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) AreYouThere(request *areYouThere) (*areYouThereResponse, error) {
	response := &areYouThereResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetPeakData(request *getPeakData) (*getPeakDataResponse, error) {
	response := &getPeakDataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetAveragesPeak(request *getAveragesPeak) (*getAveragesPeakResponse, error) {
	response := &getAveragesPeakResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetUnits(request *getUnits) (*getUnitsResponse, error) {
	response := &getUnitsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetElements(request *getElements) (*getElementsResponse, error) {
	response := &getElementsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
